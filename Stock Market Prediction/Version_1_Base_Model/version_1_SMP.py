# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pxoph5iaTKO3vnZyEVv097pTGc9i2JD8
"""

import yfinance as yf

import pandas as pd

bank_stocks = ['HDFCBANK.NS', 'SBIN.NS', 'ICICIBANK.NS', 'AXISBANK.NS', 'KOTAKBANK.NS']

start_date = '2013-01-01'
end_date = '2023-12-25'

# Individual Stock Import
individual_stock_data = {}
for symbol in bank_stocks:
    print(f"Downloading data for {symbol}")
    stock_df = yf.download(symbol, start=start_date, end=end_date)

    # Perform any immediate preprocessing if necessary
    #  handling missing data
    stock_df.fillna(method='ffill', inplace=True)
    # Save the DataFrame to a CSV file
    stock_df.to_csv(f'{symbol}.csv')

    # Store in dictionary
    individual_stock_data[symbol] = stock_df

# Combined Data Import for closing prices
print("Downloading combined data for all stocks")
combined_data = yf.download(bank_stocks, start=start_date, end=end_date)['Close']
 # Save the DataFrame to a CSV file
combined_data.to_csv(f'combined_data.csv')

for symbol, df in individual_stock_data.items():
    print(f"First 10 rows of data for {symbol}:")
    print(df.head(10))
    print("\n")

print("First 10 rows of combined data:")
print(combined_data.head(10))

import matplotlib.pyplot as plt
import seaborn as sns

# Descriptive Statistics
for symbol, df in individual_stock_data.items():
    print(f"Statistics for {symbol}:")
    print(df.describe())

# Plotting Closing Prices for Individual Stocks
for symbol, df in individual_stock_data.items():
    df['Close'].plot(title=f'Closing Prices for {symbol}')
    plt.show()

# Plotting Combined Closing Prices
combined_data.plot(title='Combined Closing Prices')
plt.show()

# Correlation Analysis for Combined Data
plt.figure(figsize=(10, 8))
sns.heatmap(combined_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix for Combined Data')
plt.show()

pip install pandas numpy matplotlib seaborn ta

import numpy as np
from ta import add_all_ta_features
from statsmodels.tsa.stattools import acf

# Assuming 'df' is one of our individual stock data DataFrames
# Calculating daily returns
df['Daily Returns'] = df['Close'].pct_change()

# Volatility (rolling 30-day standard deviation of returns)
df['Volatility'] = df['Daily Returns'].rolling(window=30).std()

# Adding technical indicators using 'ta' library
df = add_all_ta_features(df, open="Open", high="High", low="Low", close="Close", volume="Volume")

# Autocorrelation analysis
autocorrelation = acf(df['Daily Returns'].dropna(), nlags=20)
plt.figure(figsize=(10, 5))
plt.bar(range(len(autocorrelation)), autocorrelation)
plt.title('Autocorrelation of Daily Returns')
plt.show()

# Visualizing the Volatility
df['Volatility'].plot(title='Volatility over Time')
plt.show()

import numpy as np
from ta import add_all_ta_features
from ta.utils import dropna
from ta.volatility import BollingerBands
from ta.trend import MACD
from ta.momentum import RSIIndicator

# We will iterate over each stock symbol to load the data, compute the technical indicators, and save to CSV
for symbol in bank_stocks:
    # Load the historical data from CSV files
    df = pd.read_csv(f'{symbol}.csv', parse_dates=True, index_col='Date')

    # Drop any rows with NA values that may have been created during data import
    df = dropna(df)

    # Adding all technical indicators using 'ta' library
    df = add_all_ta_features(
        df, open="Open", high="High", low="Low", close="Close", volume="Volume", fillna=True
    )

    # Bollinger Bands
    indicator_bb = BollingerBands(close=df["Close"], window=20, window_dev=2)
    df['bb_bbm'] = indicator_bb.bollinger_mavg()
    df['bb_bbh'] = indicator_bb.bollinger_hband()
    df['bb_bbl'] = indicator_bb.bollinger_lband()

    # MACD
    indicator_macd = MACD(close=df["Close"], window_slow=26, window_fast=12, window_sign=9)
    df['macd'] = indicator_macd.macd()
    df['macd_signal'] = indicator_macd.macd_signal()
    df['macd_diff'] = indicator_macd.macd_diff()

    # RSI
    indicator_rsi = RSIIndicator(close=df["Close"], window=14)
    df['rsi'] = indicator_rsi.rsi()

    # Calculate returns as a feature
    df['daily_returns'] = df['Close'].pct_change()

    # Drop any remaining NA values that may have been created during feature generation
    df.dropna(inplace=True)

    # Save the DataFrame with the new features to a new CSV file
    df.to_csv(f'{symbol}_features.csv')

from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# List of stock symbols for the five banks
bank_stocks = ['AXISBANK.NS', 'HDFCBANK.NS', 'ICICIBANK.NS', 'KOTAKBANK.NS', 'SBIN.NS']

import pandas as pd

# List of stock symbols for the five banks
bank_stocks = ['AXISBANK.NS', 'HDFCBANK.NS', 'ICICIBANK.NS', 'KOTAKBANK.NS', 'SBIN.NS']

for symbol in bank_stocks:
    # Load the data
    df = pd.read_csv(f'{symbol}_features.csv', index_col='Date', parse_dates=True)
    df.dropna(inplace=True)

    # Create the 'Target' column
    # 'Target' is 1 if the next day's closing price is higher than today's closing price, else 0
    df['Tomorrow_Close'] = df['Close'].shift(-1)
    df['Target'] = (df['Tomorrow_Close'] > df['Close']).astype(int)

    # Drop the 'Tomorrow_Close' column as it's no longer needed
    df.drop(columns=['Tomorrow_Close'], inplace=True)

    # Save the modified DataFrame back to CSV
    df.to_csv(f'{symbol}_features.csv')

# Define the technical indicators we will use as features
technical_indicators = [
    'bb_bbm', 'bb_bbh', 'bb_bbl',
    'macd', 'macd_signal', 'macd_diff',
    'rsi', 'daily_returns'
]

# Dictionary to store classification reports
classification_reports = {}

# Iterate over each stock
for symbol in bank_stocks:
    # Load the data
    df = pd.read_csv(f'{symbol}_features.csv', index_col='Date', parse_dates=True)
    df.dropna(inplace=True)

    # Selecting features and target
    X = df[technical_indicators].values
    y = df['Target'].values

    # Normalizing the features
    scaler = MinMaxScaler(feature_range=(0, 1))
    X_scaled = scaler.fit_transform(X)

    # Reshape input to be [samples, time steps, features]
    X_scaled = X_scaled.reshape((X_scaled.shape[0], 1, X_scaled.shape[1]))

    # Splitting the data
    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, shuffle=False)

    # Building the LSTM model
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(1, len(technical_indicators))))
    model.add(LSTM(units=50))
    model.add(Dense(1, activation='sigmoid'))

    # Compiling the model
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Training the model
    model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)
     # Predicting and evaluating the model
    y_pred = model.predict(X_test)
    y_pred = (y_pred > 0.5).astype(int).flatten()
    classification_reports[symbol] = classification_report(y_test, y_pred, output_dict=True)
    #print(f"\nClassification Report for {symbol}:")
    #print(classification_report(y_test, y_pred))

# Print classification reports for all stocks
for symbol, report in classification_reports.items():
    print(f"\nClassification Report for {symbol}:")
    print(pd.DataFrame(report).transpose())